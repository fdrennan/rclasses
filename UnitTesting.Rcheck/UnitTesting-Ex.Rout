
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "UnitTesting"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "UnitTesting-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('UnitTesting')
Loading required package: caret
Loading required package: lattice
Loading required package: ggplot2
Loading required package: e1071
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as_factor_dataframe")
> ### * as_factor_dataframe
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as_factor_dataframe
> ### Title: as_factor_dataframe
> ### Aliases: as_factor_dataframe
> 
> ### ** Examples
> 
> 
> as_factor_dataframe(model_results_df, c('pred', 'actual'))
[38;5;246m# A tibble: 100 x 2[39m
   pred  actual
   [3m[38;5;246m<fct>[39m[23m [3m[38;5;246m<fct>[39m[23m 
[38;5;250m 1[39m zero  zero  
[38;5;250m 2[39m one   one   
[38;5;250m 3[39m zero  zero  
[38;5;250m 4[39m one   one   
[38;5;250m 5[39m zero  zero  
[38;5;250m 6[39m zero  zero  
[38;5;250m 7[39m zero  zero  
[38;5;250m 8[39m zero  zero  
[38;5;250m 9[39m zero  zero  
[38;5;250m10[39m zero  zero  
[38;5;246m# â€¦ with 90 more rows[39m
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as_factor_dataframe", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.298 0.196 5.694 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
